import type { SelectStore, SelectStoreValue } from '../../stores';
import type { ThemeColor, ThemeRounded, ThemeShadowed, ThemeSize } from '../../types';
import type { SelectListVariant, SelectListButtonProps } from '../SelectListButton';
import type { BadgeProps } from '../Badge/module';
export type SelectListItemKey = SelectStoreValue;
export type FilterQuery<T = SelectListItem> = (query: string, items: Required<T>[], selected: SelectListItemKey[]) => Required<T>[] | Promise<Required<T>[]>;
export type SelectListItem = {
    label?: string;
    value: SelectListItemKey;
    group?: string | number;
    selected?: boolean;
};
export type SelectListStore<T extends SelectListItem = SelectListItem> = {
    visible?: boolean;
    items: T[];
    filtered: T[];
    persisted: SelectListItemKey[];
    filtering?: boolean;
    input?: HTMLInputElement;
    panel?: HTMLDivElement;
    trigger?: HTMLDivElement;
};
export type SelectListContext<T extends SelectListItem = SelectListItem> = Omit<SelectStore<SelectListStore>, 'select' | 'toggle' | 'restore'> & {
    open(): void;
    close(): void;
    toggle(): void;
    isSelected(key: SelectListItemKey): boolean;
    isSelected(item: T): boolean;
    add({ value, label, group, selected }: T): void;
    select(key: SelectListItemKey): void;
    select(item: T): void;
    remove(key: SelectListItemKey): void;
    remove(item: T): void;
    restore(restoreInput?: boolean): void;
    restore(selectedItems: SelectListItemKey | SelectListItemKey[], restoreInput?: boolean): void;
    filter(query?: string): void;
    globals: SelectListContextProps;
};
export type SelectListContextProps = {
    badgeProps?: BadgeProps;
    disabled?: boolean;
    exclusive?: boolean;
    filterable?: boolean;
    full?: boolean;
    focused?: boolean;
    hovered?: boolean;
    tags?: boolean;
    min?: number;
    max?: number;
    newable?: boolean;
    placeholder?: string;
    recordless?: boolean | string;
    removable?: boolean;
    rounded?: ThemeRounded;
    shadowed?: ThemeShadowed;
    size?: ThemeSize;
    theme?: ThemeColor;
    variant?: SelectListVariant;
    transitioned?: boolean;
    onBeforeAdd?: SelectListButtonProps['onBeforeAdd'];
    onBeforeRemove?: SelectListButtonProps['onBeforeRemove'];
};
export type SelectListProps<T extends SelectListItem> = SelectListContextProps & {
    autoclose?: boolean;
    escapable?: boolean;
    items: T[];
    value?: any;
    visible?: boolean;
    filter?: FilterQuery<T>;
    onChange?: (values: SelectStoreValue | SelectStoreValue[]) => any;
};
export declare const selectListDefaults: Partial<SelectListProps<SelectListItem> & SelectListContextProps>;
