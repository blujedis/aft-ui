import type { ThemeColor, ThemeShade } from '../types';
type TokenOpacity = 0 | 5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45 | 50 | 55 | 60 | 65 | 70 | 75 | 80 | 85 | 90 | 95 | 100;
type TokenWidth = 0 | 1 | 2 | 3 | 4 | 8;
type TokenColor = ThemeColor | `${ThemeColor}-${ThemeShade}` | `${ThemeColor}-${ThemeShade}/${TokenOpacity}` | `${ThemeShade}/${TokenOpacity}` | ThemeShade;
interface GenerateOptions {
    bodyTextLight: TokenColor;
    bodyTextDark: TokenColor;
    bodyBgLight: TokenColor;
    bodyBgDark: TokenColor;
    defaultShade: ThemeShade;
    defaultSelectedShade: ThemeShade;
    softShade: TokenColor;
    softSolidShade: TokenColor;
    softSelectedShade: TokenColor;
    hoverShade: TokenColor;
    focusShade: TokenColor;
    placeholderShade: TokenColor;
    disabledOpacity: TokenOpacity;
    focusOffset: TokenWidth;
    focusWidth: number;
    formBorderLight: TokenColor;
    formBorderDark?: TokenColor;
    elementBorderLight?: TokenColor;
    elementBorderDark?: TokenColor;
    panelBgLight: TokenColor;
    panelBgDark: TokenColor;
    dividerLight: TokenColor;
    dividerDark: TokenColor;
    dividerContrastLight: TokenColor;
    dividerContrastDark: TokenColor;
    panelContainerBgLight: TokenColor;
    panelContainerBgDark: TokenColor;
    panelBorderLight: TokenColor;
    panelBorderDark: TokenColor;
    elementBgLight: TokenColor;
    elementBgDark: TokenColor;
}
export declare const defaultOptions: GenerateOptions;
export declare function generateTokens(options?: Partial<GenerateOptions>): string;
export {};
