import type { PropsWithoutPrefix, ThemeConfig, ThemeOptions } from '../types/theme';
type Primitive = boolean | string | number | undefined | Primitive[];
/**
 * Creates a new styler instance.
 *
 * @param name the name of the styler used in errors/logging.
 */
export declare function styler<C extends ThemeConfig>(themeConfig: C): {
    create: (instanceName: string) => {
        add: (key: string, value: string | number, when: Primitive) => any;
        option: <K extends "animate" | "placeholder" | "borderSizes" | "borderStyles" | "fontLeadings" | "fieldLeading" | "fontSizes" | "fieldPaddingX" | "fieldFontSizes" | "fieldPaddingY" | "fieldPaddingTightY" | "fieldUpperPaddingY" | "boxPadding" | "fieldPadding" | "buttonPadding" | "menuPadding" | "iconCaretSizes" | "objectFit" | "objectPosition" | "aspectRatio" | "roundeds" | "sizeStepdown" | "shadows" | "dropshadows" | "resizes" | "gridgaps" | "hovered" | "common" | "iconText" | "iconFill" | "iconStroke" | "mainBg" | "mainBgEven" | "mainBgOdd" | "mainRing" | "mainBorder" | "mainOutline" | "mainBorderGroupHover" | "mainBorderPeerFocus" | "mainBorderPeerHover" | "softBg" | "panelBg" | "panelContainerBg" | "notificationBg" | "tooltipBg" | "panelAccordionBg" | "ghostBgHover" | "softBgHover" | "panelBgHover" | "panelAccordionBgHover" | "selectedBgAriaSelected" | "selectedBgAriaExpanded" | "selectedBgAriaCurrent" | "selectedBgAriaChecked" | "selectedBorderAriaSelected" | "selectedAccentBgAriaSelected" | "selectedAccentBgAriaExpanded" | "selectedAccentBgAriaCurrent" | "selectedAccentBgAriaChecked" | "selectedGhostBgAriaSelected" | "selectedGhostBgAriaExpanded" | "selectedGhostBgAriaCurrent" | "selectedGhostBgAriaChecked" | "selectedSoftBgAriaSelected" | "selectedSoftBgAriaExpanded" | "selectedSoftBgAriaCurrent" | "selectedSoftBgAriaChecked" | "progressBgWebkitProgressValue" | "progressBgMozProgressBar" | "rangeBg" | "switchBgAriaChecked" | "progressFill" | "progressStroke" | "mainText" | "whiteText" | "tooltipText" | "softText" | "filledPlaceholder" | "notificationText" | "defaultText" | "inputText" | "selectedTextAriaSelected" | "selectedTextAriaExpanded" | "selectedTextAriaCurrent" | "selectedTextAriaChecked" | "selectedWhiteTextAriaSelected" | "selectedWhiteTextAriaExpanded" | "selectedWhiteTextAriaCurrent" | "selectedWhiteTextAriaChecked" | "selectedGhostTextAriaSelected" | "selectedGhostTextAriaExpanded" | "selectedGhostTextAriaCurrent" | "selectedGhostTextAriaChecked" | "outlineFocus" | "outlineFocusVisible" | "outlineFocusWithin" | "outlinePeerFocus" | "outlineGroupFocus" | "outlineGroupFocusWithin" | "ringFocus" | "ringFocusVisible" | "ringFocusWithin" | "ringPeerFocus" | "ringGroupFocus" | "ringGroupFocusWithin" | "accordionOptionRoundeds" | "avatarNotificationSizes" | "avatarSizes" | "avatarCounterSizes" | "avatarCounterTextSizes" | "avatarNotificationOffsets" | "badgeFontSizes" | "badgeInnerMargin" | "breadcrumbSpacings" | "breadcrumbMargins" | "breadcrumbFilledHeight" | "breadcrumbFilledIconWidth" | "checkboxSizes" | "cardSizes" | "cardPadding" | "cardPaddingHeader" | "cardPaddingFooter" | "cardFontSizes" | "emptySizes" | "gridHeaderPadding" | "iconSizes" | "kbdPadding" | "ratingSizes" | "paginationGroupedPadding" | "paginationFlushedPadding" | "paginationIconSizes" | "popoverSizes" | "progressBarSizes" | "progressBarRoundedBar" | "progressBarRoundedValue" | "progressCircleSizes" | "progressCircleTextSizes" | "progressCircleTrackSizes" | "rangeTrackSizes" | "rangeThumbSizes" | "rangeBorderSizes" | "switchButtonSizes" | "switchFillSizes" | "switchHandleSizes" | "switchTranslateSizes">(name: K, path: PropsWithoutPrefix<keyof ThemeOptions[K], '$'>, key: string, when: Primitive) => any;
        color: (key: string, value: string, when: Primitive) => any;
        colormap: <T extends Record<string, any>, K_1 extends keyof T>(obj: T, path: K_1, key: string, when: Primitive) => any;
        mapped: <T_1 extends Record<string, unknown>>(obj: T_1, path: string, key: string, when: Primitive, asColor?: boolean) => any;
        append: (value: string, when: Primitive) => any;
        remove: (key: string, when: Primitive) => any;
        compile: () => string;
    };
};
export {};
