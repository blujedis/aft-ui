import type { PropsWithoutPrefix, ThemeConfig, ThemeOptions } from '../types/theme';
type Primitive = boolean | string | number | undefined | Primitive[];
/**
 * Creates a new styler instance.
 *
 * @param name the name of the styler used in errors/logging.
 */
export declare function styler<C extends ThemeConfig>(themeConfig: C): {
    create: (instanceName: string) => {
        add: (key: string, value: string | number, when: Primitive) => any;
        option: <K extends "animate" | "placeholder" | "borderSizes" | "borderStyles" | "fontLeadings" | "fieldLeading" | "fontSizes" | "fieldPaddingX" | "fieldFontSizes" | "fieldButtonSizes" | "fieldPaddingY" | "fieldPaddingTightY" | "fieldUpperPaddingY" | "fieldPadding" | "buttonPadding" | "menuPadding" | "iconCaretSizes" | "objectFit" | "objectPosition" | "aspectRatio" | "roundeds" | "sizeStepdown" | "shadows" | "dropshadows" | "resizes" | "gridgaps" | "hovered" | "common" | "bgFocus" | "defaultText" | "dividerBg" | "elementBg" | "elementBorder" | "elementDivide" | "elementRing" | "elementSoftBorder" | "filledPlaceholder" | "filledText" | "filledTextAriaChecked" | "filledTextAriaExpanded" | "filledTextAriaSelected" | "formBorder" | "ghostBgHover" | "iconFill" | "iconStroke" | "iconText" | "mainBg" | "mainBgEven" | "mainBgOdd" | "mainBorder" | "mainBorderGroupHover" | "mainBorderPeerFocus" | "mainBorderPeerHover" | "mainOutline" | "mainRing" | "mutedText" | "notificationBg" | "notificationText" | "outlineFocus" | "outlineFocusVisible" | "outlineFocusWithin" | "outlineGroupFocus" | "outlineGroupFocusWithin" | "outlinePeerFocus" | "panelBg" | "panelBgGroupHover" | "panelBgHover" | "panelBorder" | "panelContainerBg" | "progressBgMozProgressBar" | "progressBgWebkitProgressValue" | "progressFill" | "progressStroke" | "ringFocus" | "ringFocusVisible" | "ringFocusWithin" | "ringGroupFocus" | "ringGroupFocusWithin" | "ringPeerFocus" | "selectOptionBg" | "selectedAccentBgAriaChecked" | "selectedAccentBgAriaExpanded" | "selectedAccentBgAriaSelected" | "selectedBgAriaChecked" | "selectedBgAriaCurrentpage" | "selectedBgAriaExpanded" | "selectedBgAriaSelected" | "selectedBorderAriaSelected" | "selectedGhostBgAriaChecked" | "selectedGhostBgAriaExpanded" | "selectedGhostBgAriaSelected" | "selectedSoftBgAriaChecked" | "selectedSoftBgAriaExpanded" | "selectedSoftBgAriaSelected" | "softBg" | "softText" | "switchBgAriaChecked" | "tooltipBg" | "tooltipText" | "unfilledText" | "unfilledTextAriaChecked" | "unfilledTextAriaExpanded" | "unfilledTextAriaSelected" | "accordionOptionRoundeds" | "avatarNotificationSizes" | "avatarSizes" | "avatarCounterSizes" | "avatarCounterTextSizes" | "avatarNotificationOffsets" | "badgeFontSizes" | "badgeInnerMargin" | "breadcrumbSpacings" | "breadcrumbMargins" | "breadcrumbFilledHeight" | "breadcrumbFilledIconWidth" | "checkboxSizes" | "cardSizes" | "cardPadding" | "cardPaddingHeader" | "cardPaddingFooter" | "cardFontSizes" | "gridHeaderPadding" | "dividerHorizontalMargin" | "dividerVerticalMargin" | "iconSizes" | "kbdPadding" | "ratingSizes" | "paginationGroupedPadding" | "paginationFlushedPadding" | "paginationIconSizes" | "progressBarSizes" | "progressBarRoundedBar" | "progressBarRoundedValue" | "progressCircleSizes" | "progressCircleTextSizes" | "progressCircleTrackSizes" | "rangeTrackSizes" | "rangeThumbSizes" | "rangeBorderSizes" | "switchButtonSizes" | "switchFillSizes" | "switchHandleSizes" | "switchTranslateSizes" | "boxPadding" | "tooltipSizes">(name: K, path: PropsWithoutPrefix<keyof ThemeOptions[K], '$'>, key: string, when: Primitive) => any;
        color: (key: string, value: string, when: Primitive) => any;
        colormap: <T extends Record<string, any>, K_1 extends keyof T>(obj: T, path: K_1, key: string, when: Primitive) => any;
        mapped: <T_1 extends Record<string, unknown>>(obj: T_1, path: string, key: string, when: Primitive, asColor?: boolean) => any;
        append: (value: string, when: Primitive) => any;
        remove: (key: string, when: Primitive) => any;
        compile: () => string;
    };
};
export {};
